/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.khabib.api;

import io.khabib.model.Branches;
import io.khabib.model.BranchesWithPredicting;
import io.khabib.model.ErrorResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-06-27T10:55:57.660Z")

@Api(value = "branches", description = "the branches API")
@RequestMapping(value = "")
public interface BranchesApi {

    @ApiOperation(value = "getBranch", nickname = "getBranchUsingGET", notes = "", response = Branches.class, tags={ "branches-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Branches.class),
        @ApiResponse(code = 404, message = "NOT FOUND", response = ErrorResponse.class) })
    @RequestMapping(value = "/branches/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Branches> getBranchUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id) throws NotFoundException;


    @ApiOperation(value = "getBranchesWithPredicting", nickname = "getBranchesWithPredictingUsingGET", notes = "", response = BranchesWithPredicting.class, tags={ "predict-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = BranchesWithPredicting.class),
        @ApiResponse(code = 404, message = "NOT FOUND", response = ErrorResponse.class) })
    @RequestMapping(value = "/branches/{id}/predict",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<BranchesWithPredicting> getBranchesWithPredictingUsingGET(@NotNull @ApiParam(value = "dayOgWeek", required = true) @Valid @RequestParam(value = "dayOgWeek", required = true) Integer dayOgWeek,@NotNull @ApiParam(value = "hourOfDay", required = true) @Valid @RequestParam(value = "hourOfDay", required = true) Integer hourOfDay,@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "getNearBranch", nickname = "getNearBranchUsingGET", notes = "", response = Branches.class, tags={ "branches-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Branches.class) })
    @RequestMapping(value = "/branches",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Branches> getNearBranchUsingGET(@NotNull @ApiParam(value = "lat", required = true) @Valid @RequestParam(value = "lat", required = true) Double lat,@NotNull @ApiParam(value = "lon", required = true) @Valid @RequestParam(value = "lon", required = true) Double lon) throws NotFoundException;

}
